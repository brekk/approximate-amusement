[{"/Users/brekkbockrath/work/cobalt-takehome/src/App.styled.js":"1","/Users/brekkbockrath/work/cobalt-takehome/src/App.js":"2","/Users/brekkbockrath/work/cobalt-takehome/src/constants.js":"3","/Users/brekkbockrath/work/cobalt-takehome/src/api.js":"4"},{"size":3868,"mtime":1606987936965,"results":"5","hashOfConfig":"6"},{"size":7751,"mtime":1606991277088,"results":"7","hashOfConfig":"6"},{"size":1743,"mtime":1606990122537,"results":"8","hashOfConfig":"6"},{"size":1071,"mtime":1606983128061,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"yepzaj",{"filePath":"14","messages":"15","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/brekkbockrath/work/cobalt-takehome/src/App.styled.js",["21","22","23","24","25","26"],"import { css, jsx } from '@emotion/react'\nimport { curry } from 'ramda'\nimport { Button as RawButton } from 'rebass'\nimport {\n  Radio as RawRadio,\n  Input as RawInput,\n  Label as RawLabel\n} from '@rebass/forms'\nimport styled from '@emotion/styled'\n\nimport { SENTIMENTAL_COLORS } from './constants'\n\nexport const Button = styled(RawButton)(`\n  background-color: #0c8217;\n  font-weight: bold;\n  margin: 1rem;\n`)\n\nexport const Options = styled.ul(`\n  display: flex;\n  opacity: ${({ active }) => (active ? 1 : 0)};\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  height: 3rem;\n  min-height: 3rem;\n  margin: 0;\n  padding: 0;\n  border-radius: 0.5rem;\n  background-color: rgba(0,0,0,0.2);\n`)\n\nexport const Option = styled.li(`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  min-width: 50%;\n  padding: 0;\n  min-height: 2rem;\n  list-style: none;\n  &:first-of-type {\n    border-right: 1px solid #aaa;\n  }\n  &:last-of-type {\n    border-left: 1px solid #ddd;\n  }\n`)\n\nexport const Game = styled.section(`\n  display: flex;\n  width: calc(100% - 2rem);\n  height: calc(100% - 2rem);\n  flex-direction: column;\n  padding: 1rem;\n  background-color: ${({ sentiment }) => 'sentiment' || '#ff0000'};\n  table {\n    display: inline-table;\n    table-layout: fixed;\n    border-collapse: collapse;\n    width: width(100% - 4rem);\n    margin: 2rem;\n    min-width: 30rem;\n    tbody tr {\n      background-color: #fff;\n      border: 1px dotted blue;\n    }\n    tbody tr.fake {\n      background: repeating-linear-gradient(45deg, transparent, transparent 10px, rgba(0,255,0,0.4) 10px, rgba(0,255,0,0.4) 20px);\n    }\n    td {\n      padding: 0.5rem;\n      text-align: center;\n      &:first-of-type {\n        text-align: left;\n      }\n    }\n  }\n`)\n\nexport const Message = styled.p(`\n  padding: 1rem;\n  margin: 3rem auto;\n`)\n\nconst labelStyle = ({ active }) =>\n  css`\n    justify-content: center;\n    cursor: pointer;\n    min-width: 8rem;\n    border-radius: 0.5rem;\n    background-color: ${active ? 'purple' : 'transparent'};\n    justify-content: space-around;\n    color: ${active ? 'white' : '#ccc'};\n    padding: 0.75rem;\n    svg {\n      margin-left: 0.5rem;\n      margin-right: 0.5rem;\n    }\n    &:hover {\n      background-color: purple;\n      color: white;\n      svg {\n        fill: white;\n      }\n    }\n  `\n\nexport const TryAgain = styled(RawLabel)(`\n  ${labelStyle};\n  padding-right: 0;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n`)\n\nexport const SubmitScore = styled(RawLabel)(`\n  ${labelStyle};\n  padding-left: 0;\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n`)\nexport const SendScore = styled.aside(`\n  justify-content: center;\n  padding: 0.5rem;\n  display: flex;\n  flex-direction: row;\n`)\n\nexport const UserLabel = styled.label(`\n  display: flex;\n  justify-content: flex-end;\n  padding: 1rem 0;\n  font-weight: bold;\n`)\n\nexport const UserName = styled.input(`\n  margin: 0 1rem;\n  font-size: 1rem;\n  display: block;\n  padding: 0.5rem;\n  width: 40%;\n`)\n\nexport const AttemptButton = styled.button(`\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.5rem 0.75rem;\n  text-align: center;\n  display: flex;\n  flex-direction: row;\n  align-items: space-around;\n  justify-content: space-around;\n  width: 15%;\n  min-width: 12rem;\n  max-width: 16rem;\n  cursor: pointer;\n  margin: 1rem 0;\n  color: white;\n  background-color: #0c8217;\n  border: none;\n  border-radius: 0.5rem;\n  align-self: center;\n  transition: background 0.3s ease-out, color 0.4s ease-out;\n  \n  &::before {\n    content: \"ðŸŽ²\";\n    display: inline-block;\n    margin-right: 0.5rem;\n    transition: transform 0.2s ease-out;\n  }\n  &:hover {\n    background-color: #17531d;\n    color: #8c8;\n    text-shadow: 0 1px 1px rgba(0,0,0,0.4);\n    &::before {\n      transform: scale(1.9);\n      transition: transform 0.1s ease-in;\n    }\n  }\n`)\n",["27","28","29","30","31"],"/Users/brekkbockrath/work/cobalt-takehome/src/App.js",["32","33","34","35","36","37"],"import { useState, useEffect } from 'react'\nimport blem from 'blem'\nimport { css } from '@emotion/css'\nimport {\n  ifElse,\n  reject,\n  propEq,\n  sortBy,\n  slice,\n  last,\n  prop,\n  curry,\n  range,\n  map,\n  pipe\n} from 'ramda'\n// import { Button } from 'rebass'\nimport { Label, Input, Radio } from '@rebass/forms'\nimport {\n  Game,\n  AttemptButton,\n  TryAgain,\n  SubmitScore,\n  Message,\n  Button,\n  Options,\n  Option,\n  SendScore,\n  UserLabel,\n  UserName\n} from './App.styled'\nimport logo from './logo.svg'\n\nimport api from './api'\nimport { enthusiasm, randoNum } from './utils'\nimport {\n  STATUS_LOADING,\n  STATUS_ERROR,\n  STRINGS,\n  UNSET_SCORE,\n  ATTEMPT_LIMIT\n} from './constants'\n\nconst {\n  NAME_DEFAULT,\n  OPTION_AGAIN,\n  OPTION_CTA,\n  ERROR_SYSTEM_BACKEND,\n  MESSAGE_DEFAULT,\n  MESSAGE_SAVED,\n  ERROR_USER_SCORE,\n  ERROR_USER_NAME,\n  ENTREAT_USER_TO_SUBMIT\n} = STRINGS\n\nconst bem = blem('GuessApp')\nconst sortByScore = sortBy(pipe(prop('score'), z => z * -1))\n\nconst Leaderboard = ({ scores, givenName }) =>\n  console.log('SCORES', scores) || (\n    <table>\n      <thead>\n        <tr>\n          <th colspan=\"3\">\n            <strong>Leaderboard</strong>\n          </th>\n        </tr>\n        <tr>\n          <th>Name</th>\n          <th>Clicks</th>\n          <th>Score</th>\n        </tr>\n      </thead>\n      <tbody>\n        {pipe(\n          sortByScore,\n          slice(0, 10),\n          map(({ name, fake, clicks, score }) => (\n            <tr key={name} className={fake ? 'fake' : ''}>\n              <td>{fake ? givenName : name}</td>\n              <td>{clicks}</td>\n              <td>{score}</td>\n            </tr>\n          ))\n        )(scores)}\n      </tbody>\n    </table>\n  )\n\nconst isTopValue = curry((knownValues, x) =>\n  ifElse(\n    z => z.length < 10,\n    () => true,\n    pipe(\n      sortByScore,\n      slice(0, 10),\n      last,\n      prop('score'),\n      lowestTopScore => x > lowestTopScore\n    )\n  )(knownValues)\n)\n\nconst realScoresOnly = reject(propEq('fake', true))\n\nconst App = ({ debug }) => {\n  // convention for easier scanning: $-prefixed values come from `useState`\n  const [$status, setStatus] = useState(STATUS_LOADING)\n  const [$tryAgain, setTryAgain] = useState(true)\n  const [$saved, setSaved] = useState([])\n  const [$msg, setMessage] = useState(MESSAGE_DEFAULT)\n  const [$score, setScore] = useState(UNSET_SCORE)\n  const [$name, setName] = useState(NAME_DEFAULT)\n  const [$count, setCount] = useState(0)\n  const [$serverScores, setServerScores] = useState([])\n  const [$requestCount, setRequestCount] = useState(0)\n  // sendScoreWithContext :: Event -> Void\n  const sendScore = e => {\n    e.preventDefault()\n    if (!$score || !$name) {\n      if (!$score) setMessage(ERROR_USER_SCORE)\n      if (!$name) setMessage(ERROR_USER_NAME)\n      return\n    }\n    api\n      .addAScore({ name: $name, score: $score, clicks: $count })\n      .catch(err => setMessage(err.toString()))\n      .then(x => {\n        setMessage(MESSAGE_SAVED)\n        api\n          .fetchAllScores()\n          .catch(z => {\n            console.error('error on request', z)\n            setMessage(ERROR_SYSTEM_BACKEND)\n            setStatus(STATUS_ERROR)\n          })\n          .then(data => {\n            if (data) {\n              setServerScores(data)\n              setName(NAME_DEFAULT)\n              setTryAgain(true)\n              setScore(UNSET_SCORE)\n              setCount(0)\n              setMessage(MESSAGE_DEFAULT)\n              setStatus(STATUS_LOADING)\n              setSaved([])\n              setTryAgain(true)\n            }\n          })\n      })\n  }\n\n  // attemptWithContext :: Event -> Void\n  const attempt = e => {\n    e.preventDefault()\n    if ($count <= ATTEMPT_LIMIT) {\n      const newCount = $count + 1\n      const newVal = randoNum()\n\n      const canTryAgain = $count < ATTEMPT_LIMIT\n      const isGoodScore =\n        $serverScores.length > 0\n          ? isTopValue($serverScores, newVal)\n          : true\n      if (isGoodScore) {\n        setServerScores(\n          realScoresOnly($serverScores).concat({\n            name: $name || NAME_DEFAULT,\n            clicks: newCount,\n            score: newVal,\n            fake: true\n          })\n        )\n      } else {\n        setServerScores(realScoresOnly($serverScores))\n      }\n      const tellTheUserWhatToDo = isGoodScore\n        ? ENTREAT_USER_TO_SUBMIT\n        : `Rating: ${enthusiasm(newVal)}`\n      setCount(newCount)\n      setScore(newVal)\n      setMessage(\n        canTryAgain\n          ? `${tellTheUserWhatToDo} You've guessed ${newCount} / 10 times! Submit or try your luck again?`\n          : `${tellTheUserWhatToDo} You've guessed 10 times! You can only submit this score!`\n      )\n      setSaved(\n        $saved.concat([[newVal, enthusiasm(newVal), newCount]])\n      )\n      if (!canTryAgain) setTryAgain(false)\n    }\n  }\n  const allowAnotherAttempt = $count <= ATTEMPT_LIMIT\n  const attemptButton = allowAnotherAttempt ? (\n    <AttemptButton\n      className={bem('button', 'attempt')}\n      name=\"score\"\n      onClick={attempt}\n    >\n      Generate!\n    </AttemptButton>\n  ) : null\n  const submitName =\n    $saved.length > 0 ? (\n      <SendScore>\n        <UserLabel className={bem('label', 'name')} htmlFor=\"name\">\n          Your Name\n        </UserLabel>\n        <UserName\n          className={bem('input', 'name')}\n          defaultValue={$name}\n          name=\"name\"\n          onChange={e => setName(e.target.value)}\n        />\n        <Button\n          name=\"submit\"\n          onClick={sendScore}\n          className={bem('button', 'submit')}\n        >\n          Submit\n        </Button>\n      </SendScore>\n    ) : null\n  useEffect(() => {\n    if ($serverScores.length === 0 && $requestCount < 3) {\n      api\n        .fetchAllScores()\n        .catch(z => {\n          console.error('error on request', z)\n          setMessage(ERROR_SYSTEM_BACKEND)\n          setStatus(STATUS_ERROR)\n        })\n        .then(data => {\n          if (data) {\n            setServerScores(data)\n          }\n        })\n      setRequestCount($requestCount + 1)\n    }\n  }, [$serverScores, $requestCount])\n  return (\n    <Game>\n      <h1>Guessing Game</h1>\n      {$score !== UNSET_SCORE && <h2>Score: {$score}</h2>}\n      {$msg && <Message>{$msg}</Message>}\n      {$status !== STATUS_ERROR ? (\n        <>\n          {$tryAgain ? attemptButton : null}\n          {$count ? (\n            <Options>\n              <Option>\n                <TryAgain\n                  htmlFor=\"try-again-or-submit\"\n                  active={$tryAgain}\n                >\n                  {$count ? OPTION_AGAIN : OPTION_CTA}\n                  <Radio\n                    id=\"try-again-or-submit\"\n                    name=\"try-again-or-submit\"\n                    value={$tryAgain}\n                    checked={$tryAgain}\n                    onClick={e => setTryAgain(!$tryAgain)}\n                  />\n                </TryAgain>\n              </Option>\n              {$count ? (\n                <Option>\n                  <SubmitScore\n                    htmlFor=\"try-again-or-submit\"\n                    active={!$tryAgain}\n                  >\n                    <Radio\n                      id=\"try-again-or-submit\"\n                      name=\"try-again-or-submit\"\n                      value={!$tryAgain}\n                      checked={!$tryAgain}\n                      onClick={e => setTryAgain(!$tryAgain)}\n                    />\n                    Submit\n                  </SubmitScore>\n                </Option>\n              ) : null}\n            </Options>\n          ) : null}\n          {!$tryAgain ? submitName : null}\n          {$serverScores.length ? (\n            <Leaderboard scores={$serverScores} givenName={$name} />\n          ) : null}\n        </>\n      ) : null}\n    </Game>\n  )\n}\n\nexport default App\n","/Users/brekkbockrath/work/cobalt-takehome/src/constants.js",[],"/Users/brekkbockrath/work/cobalt-takehome/src/api.js",["38","39","40","41"],{"ruleId":"42","severity":1,"message":"43","line":1,"column":15,"nodeType":"44","messageId":"45","endLine":1,"endColumn":18},{"ruleId":"42","severity":1,"message":"46","line":2,"column":10,"nodeType":"44","messageId":"45","endLine":2,"endColumn":15},{"ruleId":"42","severity":1,"message":"47","line":5,"column":12,"nodeType":"44","messageId":"45","endLine":5,"endColumn":20},{"ruleId":"42","severity":1,"message":"48","line":6,"column":12,"nodeType":"44","messageId":"45","endLine":6,"endColumn":20},{"ruleId":"42","severity":1,"message":"49","line":11,"column":10,"nodeType":"44","messageId":"45","endLine":11,"endColumn":28},{"ruleId":"50","severity":1,"message":"51","line":69,"column":1,"nodeType":"52","messageId":"53","endLine":69,"endColumn":131},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"42","severity":1,"message":"64","line":3,"column":10,"nodeType":"44","messageId":"45","endLine":3,"endColumn":13},{"ruleId":"42","severity":1,"message":"65","line":13,"column":3,"nodeType":"44","messageId":"45","endLine":13,"endColumn":8},{"ruleId":"42","severity":1,"message":"66","line":18,"column":10,"nodeType":"44","messageId":"45","endLine":18,"endColumn":15},{"ruleId":"42","severity":1,"message":"67","line":18,"column":17,"nodeType":"44","messageId":"45","endLine":18,"endColumn":22},{"ruleId":"42","severity":1,"message":"68","line":32,"column":8,"nodeType":"44","messageId":"45","endLine":32,"endColumn":12},{"ruleId":"50","severity":1,"message":"69","line":184,"column":1,"nodeType":"52","messageId":"53","endLine":184,"endColumn":107},{"ruleId":"42","severity":1,"message":"70","line":6,"column":3,"nodeType":"44","messageId":"45","endLine":6,"endColumn":6},{"ruleId":"42","severity":1,"message":"71","line":11,"column":10,"nodeType":"44","messageId":"45","endLine":11,"endColumn":15},{"ruleId":"42","severity":1,"message":"72","line":20,"column":7,"nodeType":"44","messageId":"45","endLine":20,"endColumn":17},{"ruleId":"73","severity":1,"message":"74","line":32,"column":1,"nodeType":"75","endLine":51,"endColumn":2},"no-unused-vars","'jsx' is defined but never used.","Identifier","unusedVar","'curry' is defined but never used.","'RawRadio' is defined but never used.","'RawInput' is defined but never used.","'SENTIMENTAL_COLORS' is defined but never used.","max-len","This line has a length of 130. Maximum allowed is 100.","Program","max","no-native-reassign",["76"],"no-negated-in-lhs",["77"],"handle-callback-err",[],"no-new-require",[],"no-path-concat",[],"'css' is defined but never used.","'range' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'logo' is defined but never used.","This line has a length of 106. Maximum allowed is 100.","'map' is defined but never used.","'trace' is defined but never used.","'defaultify' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]